#! /usr/bin/env python

####################################################################################################
# 
# Babel - A Bibliography Manager
# Copyright (C) 2014 Fabrice Salvaire
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
####################################################################################################

####################################################################################################
#
# Logging
#

import Babel.Logging.Logging as Logging

logger = Logging.setup_logging('babel')

####################################################################################################

import argparse

####################################################################################################

from Babel.Lexique.BritishNationalCorpus import BritishNationalCorpusDataBase
from Babel.Pdf.PdfDocument import PdfDocument
from Babel.Math.Binning import Binning1D
from Babel.Math.Histogram import Histogram
from Babel.Tools.ProgramOptions import PathAction

####################################################################################################

class DecodePageRange(argparse.Action):

    def __call__(self, parser, namespace, values, option_string=None):
        pages_ranges = []
        for item in values.split(','):
            if item == 'all':
                pages_ranges = 'all'
                break
            elif '-' in item:
                try:
                    start, stop = [int(x) for x in item.split('-')[:2]]
                    pages_ranges.append(slice(start, stop +1))
                except:
                    raise ValueError("Bad range expression " + item)
            else:
                try:
                    start = int(item)
                    pages_ranges.append(slice(start, start +1))
                except:
                    raise ValueError("Bad page number " + item)
        setattr(namespace, self.dest, pages_ranges)

####################################################################################################
#
# Options
#

argument_parser = argparse.ArgumentParser(description='PDF to Text.')

argument_parser.add_argument('path', metavar='FILE.pdf',
                             action=PathAction,
                             help='PDF file')

argument_parser.add_argument('--info',
                             action='store_true',
                             default=False,
                             help='Display Information')

argument_parser.add_argument('--words',
                             action='store_true',
                             default=False,
                             help='Display document words')

argument_parser.add_argument('--main-words',
                             action='store_true',
                             default=False,
                             help='Display document main words')

argument_parser.add_argument('--show-histogram',
                             action='store_true',
                             default=False,
                             help='show histogram words')

argument_parser.add_argument('--pages',
                             default=None,
                             action=DecodePageRange,
                             help='Page ranges')

argument_parser.add_argument('--format',
                             default='text',
                             choices=['text', 'style', 'xml', 'block'],
                             help='Output format')

args = argument_parser.parse_args()

####################################################################################################

def display_page(page, output_format):

    print("Page %u" % (page.page_number +1))
    text_page = page.to_text()

    if output_format == 'text':
        for block_text in sorted(text_page.blocks):
            print()
            for text_line in block_text.line_iterator():
                print(str(text_line))
    elif output_format == 'block':
        text_blocks = text_page.blocks
        for text_block in text_blocks.sorted_iter(): 
            template = """
Block %u
  y rank %u
  Interval %s
  Horizontal Margin %s
  Is centred %s
  Is left justifier %g
  Is right justifier %g
  Number of characters %u
  main style %s
"""
            print(template[:-1] % (text_block.block_id,
                                   text_block.y_rank,
                                   text_block.interval,
                                   str(text_block.horizontal_margin),
                                   text_block.is_centred,
                                   text_block.is_left_justified,
                                   text_block.is_right_justified,
                                   len(text_block),
                                   str(text_block.main_style)
                                   ))
            line = '='*100
            print(line)
            print(str(text_block))
            print(line)
    elif output_format == 'style':
        print(text_page.dump_text_style())
    elif output_format == 'xml':
        print(text_page.dump_text_page_xml())

####################################################################################################

def show_words(pdf_document, main_words):

    database = BritishNationalCorpusDataBase()
    word_table = database.word_table
    document_words = pdf_document.words

    if args.show_histogram:
        Binning = Binning1D((0, len(document_words) +1), bin_width=1)
        histogram = Histogram(Binning)
        for word_count in document_words:
            histogram.fill(word_count.count)
        print(histogram)
        histogram.normalise()
        sub_histogram = histogram.non_zero_bin_range_histogram()
        x_values, y_values, x_errors, y_errors = sub_histogram.to_graph()
        import pylab
        pylab.plot(x_values, y_values, 'o')
        pylab.show()

    print('Words:')
    for word_count in document_words:
        word_rows = word_table.select_by(word=word_count.word).all()
        if word_rows:
            word_row = word_rows[0]
            # print '%6u' % count, word, str([word_row.part_of_speech_tag_id for word_row in word_rows])
            if ((not args.main_words) or
                (args.main_words and
                 len(word_count.word) >= 3 and database.is_noun(word_row))):
                tag = database.part_of_speech_tag_from_id(word_row.part_of_speech_tag_id)
                print('%6u' % word_count.count, word_count.word, tag)
        else:
            print('%6u' % word_count.count, word_count.word)

####################################################################################################

pdf_document = PdfDocument(args.path)

if args.info:
    print('Number of pages:', pdf_document.number_of_pages)
    metadata = pdf_document.metadata
    for key in sorted(metadata.keys()):
        print(key + ': ' + str(metadata[key]))
    print()

if args.words or args.main_words:
    show_words(pdf_document, args.main_words)

if args.pages is not None:
    if args.pages == 'all':
        for page in pdf_document:
            display_page(page, args.format)
    else:
        for page_range in args.pages:
            for page in pdf_document[page_range]:
                display_page(page, args.format)

####################################################################################################
# 
# End
# 
####################################################################################################
