#! /usr/bin/env python

####################################################################################################
# 
# Babel - A Bibliography Manager 
# Copyright (C) Salvaire Fabrice 2013 
# 
####################################################################################################

####################################################################################################
#
# Logging
#

import Babel.Logging.Logging as Logging

logger = Logging.setup_logging('babel')

####################################################################################################

import argparse
import os

import numpy as np
import pylab

####################################################################################################

from Babel.DataBase.WordDataBase import WordDataBase
from Babel.Pdf.PdfDocument import PdfDocument
from Babel.Tools.Binning import Binning1D
from Babel.Tools.Histogram import Histogram
from Babel.Tools.ProgramOptions import PathAction

####################################################################################################

class DecodePageRange(argparse.Action):

    def __call__(self, parser, namespace, values, option_string=None):
        pages_ranges = []
        for item in values.split(','):
            if item == 'all':
                pages_ranges = 'all'
                break
            elif '-' in item:
                try:
                    start, stop = [int(x) for x in item.split('-')[:2]]
                    pages_ranges.append(slice(start, stop +1))
                except:
                    raise ValueError("Bad range expression " + item)
            else:
                try:
                    start = int(item)
                    pages_ranges.append(slice(start, start +1))
                except:
                    raise ValueError("Bad page number " + item)
        setattr(namespace, self.dest, pages_ranges)

####################################################################################################
#
# Options
#

argument_parser = argparse.ArgumentParser(description='PDF to Text.')

argument_parser.add_argument('path', metavar='FILE.pdf',
                             action=PathAction,
                             help='PDF file')

argument_parser.add_argument('--info',
                             action='store_true',
                             default=False,
                             help='Display Information')

argument_parser.add_argument('--words',
                             action='store_true',
                             default=False,
                             help='Display document words')

argument_parser.add_argument('--main-words',
                             action='store_true',
                             default=False,
                             help='Display document main words')

argument_parser.add_argument('--pages',
                             default=None,
                             action=DecodePageRange,
                             help='Page ranges')

argument_parser.add_argument('--format',
                             default='text',
                             choices=['text', 'style', 'xml'],
                             help='Output format')

args = argument_parser.parse_args()

####################################################################################################

def display_page(page, output_format):

    print "Page %u" % (page.page_number +1)
    text_page = page.to_text()

    if output_format == 'text':
        for block_text in sorted(text_page.to_blocks()):
            print
            for text_line in block_text.line_iterator():
                print unicode(text_line)
    elif output_format == 'style':
        print text_page.dump_text_style()
    elif output_format == 'xml':
        print text_page.dump_text_page_xml()

####################################################################################################

def show_words(pdf_document, main_words):

    database_path = os.path.join(os.path.dirname(__file__),
                                 '../Babel/Lexique/BritishNationalCorpus/bnc.sqlite')
    print os.path.realpath(database_path)
    database = WordDataBase(database_path)
    word_table = database.word_table
    part_of_speech_tag_table = database.part_of_speech_tag_table
    part_of_speech_tags = {part_of_speech_tag_row.tag:part_of_speech_tag_row
                           for part_of_speech_tag_row in part_of_speech_tag_table.all()}

    main_tag = [part_of_speech_tags[tag].id for tag in
                ('NN1', 'NN1-NP0', 'NN1-VVB', 'NN1-VVG', 'NN2', 'NN2-VVZ', 'NP0')]

    words = pdf_document.words()

    Binning = Binning1D((0, len(words) +1), bin_width=1)
    histogram = Histogram(Binning)
    for word, count in words:
        histogram.fill(count)
    print histogram
    histogram.normalise()
    sub_histogram = histogram.non_zero_bin_range_histogram()
    x_values, y_values, x_errors, y_errors = sub_histogram.to_graph()
    pylab.plot(x_values, y_values, 'o')
    pylab.show()

    print 'Words'
    for word, count in words:
        word_rows = word_table.select_by(word=word).all()
        if word_rows:
            word_row = word_rows[0]
            # print '%6u' % count, word, str([word_row.part_of_speech_tag_id for word_row in word_rows])
            if ((not args.main_words) or
                (args.main_words and word_row.part_of_speech_tag_id in main_tag)):
                tag_row = part_of_speech_tag_table.select_by(id=word_row.part_of_speech_tag_id).one()
                print '%6u' % count, word, tag_row.tag
        else:
            print '%6u' % count, word

####################################################################################################

pdf_document = PdfDocument(args.path)

if args.info:
    print 'Number of pages:', pdf_document.number_of_pages
    metadata = pdf_document.metadata
    for key in sorted(metadata.iterkeys()):
        print key + ': ' + unicode(metadata[key])
    print

if args.words or args.main_words:
    show_words(pdf_document, args.main_words)

if args.pages is not None:
    if args.pages == 'all':
        for page in pdf_document:
            display_page(page, args.format)
    else:
        for page_range in args.pages:
            for page in pdf_document[page_range]:
                display_page(page, args.format)

####################################################################################################
# 
# End
# 
####################################################################################################
